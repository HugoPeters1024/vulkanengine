#version 460


layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0, rgba16f) uniform readonly image2D inputImage;
layout(binding = 1, rgba16f) uniform writeonly image2D resultImage;

layout (push_constant) uniform PushConstant {
    // imageSizeX, imageSizeY, horz
    ivec4 inp;
};


#define PI 3.1415926538

bool isHorz() { return inp.z == 0; }

float gaussian(float d) {
    const float sigma = 8.0f;
    return inversesqrt(2 * PI * sigma * sigma) * exp(-(d * d)/(2 * sigma * sigma));
}

void main() {
    const int sx = inp.x;
    const int sy = inp.y;
    ivec2 loc = isHorz() ? ivec2(gl_GlobalInvocationID.xy) : ivec2(gl_GlobalInvocationID.yx);
    if (isHorz() ? loc.x > sx : loc.y > sy) return;

    vec4 avg = vec4(0);
    const int ksHalf = 20;
    for(int d = -ksHalf; d<=ksHalf; d++) {
        ivec2 nloc = isHorz() ? ivec2(min(sx, loc.x + d), loc.y) : ivec2(loc.x, min(sy, loc.y + d));
        avg += gaussian(float(d)) * imageLoad(inputImage, nloc);
    }

    imageStore(resultImage, loc, avg);
}